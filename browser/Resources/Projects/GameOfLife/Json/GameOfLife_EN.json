{
  "title": "Conway's Game of Life",
  "description": "An implementation of Conway's Game of Life using C++ and SDL2, featuring dynamic cell updates and rendering.",
  "content": [
    {
      "type": "image",
      "value": "Resources/Projects/GameOfLife/Images/GameOfLife.gif"
    },
    {
      "type": "text",
      "value": "Conway's Game of Life is a cellular automaton devised by mathematician John Conway. It consists of a grid of cells that evolve based on specific rules. This project implements the game using C++ and SDL2, allowing for visualization of the cellular evolution."
    },
    {
      "type": "text",
      "value": "The game operates on a simple set of rules that determine the fate of each cell in the grid based on its neighbors. Each cell can either be alive or dead, and the state of the grid changes with each iteration, creating fascinating patterns and behaviors."
    },
    {
      "type": "other",
      "value": "<h4> Rules of Conway's Game of Life</h4><ol><li>Any live cell with fewer than two live neighbors dies (underpopulation).</li><li>Any live cell with two or three live neighbors lives on to the next generation.</li><li>Any live cell with more than three live neighbors dies (overpopulation).</li><li>Any dead cell with exactly three live neighbors becomes a live cell (reproduction).</li></ol>"
    },
    {
      "type": "text",
      "value": "The GameOfLife class handles the core mechanics, including grid initialization, event handling, updating the grid, and rendering cells. The game starts with a random distribution of live and dead cells and follows Conway's rules to update the grid at each step."
    },
    {
      "type": "code",
      "value": "class GameOfLife final: public GameTemplate\n{\npublic:\n\tGameOfLife(const int scale = 3);\n\t~GameOfLife() override;\n\n\tGameOfLife(const GameOfLife& other) = delete;\n\tGameOfLife(GameOfLife&& other) noexcept = delete;\n\tGameOfLife& operator=(const GameOfLife& other) = delete;\n\tGameOfLife& operator=(GameOfLife&& other) noexcept = delete;\n\n\tvoid HandleEvents(const SDL_Event& event) override;\n\tvoid Update() override;\n\tvoid Resize(int new_width, int new_height);\n\tvoid Render() override;\nprivate:\n\tstatic void RenderPixel(int x, int y);\n\tbool IsAlive(int x, int y) const;\n\tTMatrix<bool>* m_pGrid;\n\tTMatrix<bool>* m_pBuffer;\n\tconst int m_Scale = 1;\n};",
      "codeLanguage": "cpp"
    },
    {
      "type": "image",
      "value": "Resources/Projects/GameOfLife/Images/GameOfLife_1.png"
    },
    {
      "type": "text",
      "value": "The Update method processes each cell and determines whether it should be alive or dead in the next generation based on the number of neighboring live cells. The game maintains a buffer to prevent modifying the grid while it is being updated."
    },
    {
      "type": "code",
      "value": "void GameOfLife::Update() {\n  const int width = m_pGrid->Rows(), height = m_pGrid->Cols();\n  for (int x = 0; x < width; x++) {\n    for (int y = 0; y < height; y++) {\n      m_pBuffer->Get(x, y) = IsAlive(x, y);\n    }\n  }\n  for (int x = 0; x < width; x++) {\n    for (int y = 0; y < height; y++) {\n      m_pGrid->Get(x, y) = m_pBuffer->Get(x, y);\n    }\n  }\n}",
      "codeLanguage": "cpp"
    },
    {
      "type": "text",
      "value": "The TMatrix class is a custom template matrix implementation used to store the game grid. It supports dynamic memory allocation and ensures efficient access to cell states."
    },
    {
      "type": "code",
      "value": "template<typename T>\nclass TMatrix final {\n  public:\n    TMatrix(int rows, int cols);\n    ~TMatrix();\n    T& Get(int x, int y) { return m_pGrid[x][y]; }\n    int Rows() const { return m_Rows; }\n    int Cols() const { return m_Cols; }\n  private:\n    T** m_pGrid;\n    int m_Rows, m_Cols;\n};",
      "codeLanguage": "cpp"
    }
  ],
  "features": [
    "Cellular Automation",
    "Object Oriented Programming",
    "Real-time rendering with SDL2",
    "Dynamic memory allocation"
  ],
  "futurePlans": [
    "Options can be added for user interaction, allowing manual cell placement and modifications to the grid.",
    "Rendering performance can be improved to ensure smoother visuals and better efficiency, especially for larger grids.",
    "UI settings can be introduced for adjusting grid scale, colors, and other visual aspects to enhance customization.",
    "Start and stop options can be implemented, giving users more control over when the simulation runs or pauses."
  ],
  "links": [
    {
      "name": "Wikipedia: Conway's Game of Life", "url": "https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"
    }
  ]
}