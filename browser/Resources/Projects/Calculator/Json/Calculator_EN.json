{
  "title": "Calculator Project",
  "description": "A collection of three calculators: Simple Calculator, Science Calculator, and Programming Calculator.",
  "content": [
    {
      "type": "image",
      "value": "Resources/Projects/Calculator/Images/Calculator_Simple.png"
    },
    {
      "type": "text",
      "value": "This project is a feature-rich calculator built using Angular. It supports three different modes: Simple Calculator, Scientific Calculator, and Programming Calculator. The simple and scientific calculators share a common BaseCalculatorComponent, while the programming calculator includes custom logic to handle numeral system conversions and logical operations."
    },
    {
      "type": "text",
      "value": "The Simple Calculator enables fundamental arithmetic operations such as addition, subtraction, multiplication, and division. It provides a user-friendly interface with keyboard support and real-time result evaluation."
    },
    {
      "type": "image",
      "value": "Resources/Projects/Calculator/Images/Calculator_Science.png"
    },
    {
      "type": "text",
      "value": "The Scientific Calculator expands on the Simple Calculator by introducing trigonometric functions (sin, cos, tan), exponentiation, and mathematical constants like Pi (Ï€) and Euler's number (e). It offers enhanced functionality for more advanced calculations."
    },
    {
      "type": "text",
      "value": "The Programming Calculator is designed for software developers and engineers. It enables conversions between hexadecimal, decimal, octal, and binary number systems. Additionally, it supports bitwise operations such as AND, OR, XOR, NOT, left shift, and right shift. This makes it a powerful tool for low-level programming and hardware interaction."
    },
    {
      "type": "text",
      "value": " Key Features Basic arithmetic operations (+, -, *, /)Scientific functions (sin, cos, tan, sqrt, exponentiation)Programming mode with number system conversionsBitwise operations (AND, OR, XOR, NOT, shifts)Keyboard input supportReal-time evaluationHistory tracking of calculations"
    },
    {
      "type": "text",
      "value": "The calculator operates with a shared base component that provides common functionalities such as result evaluation and input handling. Below is the TypeScript class for the BaseCalculatorComponent, which serves as the foundation for all three calculator modes."
    },
    {
      "type": "code",
      "value": "export class BaseCalculatorComponent {\n  displayControl = new FormControl('');\n  temporaryResult: string = '';\n  error: string = '';\n\n  constructor() {\n    this.displayControl.valueChanges.subscribe(value => {\n      this.updateTemporaryResult(value || '');\n    });\n  }\n\n  updateTemporaryResult(value: string) {\n    try {\n      this.temporaryResult = eval(value).toString();\n      this.error = '';\n    } catch (error) { }\n  }\n}",
      "codeLanguage": "typescript"
    },
    {
      "type": "image",
      "value": "Resources/Projects/Calculator/Images/Calculator_Programming.png"
    },
    {
      "type": "text",
      "value": "The Programming Calculator extends the BaseCalculatorComponent and introduces numeral system handling. It allows users to switch between binary, octal, decimal, and hexadecimal modes seamlessly."
    },
    {
      "type": "code",
      "value": "/** Enum representing different programming modes */\nexport enum EProgrammingMode {\n  Binary = 2,\n  Octal = 8,\n  Dec = 10,\n  Hex = 16,\n}",
      "codeLanguage": "typescript"
    },
    {
      "type": "text",
      "value": "The calculator also includes a history component that stores previous calculations. This feature enhances usability by allowing users to recall and reuse past equations."
    },
    {
      "type": "code",
      "value": "AddCalculation(calculation: Calculation | ProgrammingCalculation) {\n    if (!this.HasCalculation(calculation)) {\n      this.history.push(calculation);\n    }\n  }",
      "codeLanguage": "typescript"
    },
    {
      "type": "text",
      "value": "The Programming Calculator supports direct keyboard input for operations. It validates input based on the selected mode, ensuring that users can only enter valid characters. The getAllowedCharacters method restricts input based on the current numeral system."
    },
    {
      "type": "code",
      "value": "/** Returns the allowed characters for the current mode */\nprivate getAllowedCharacters(): RegExp {\n  const operatorsPattern = this.escapeRegex(this.operators.source); // Extracts pattern from RegExp\n\n  switch (this.currentMode) {\n    case EProgrammingMode.Binary:\n      return new RegExp(`^[01${operatorsPattern}]$`); // Binary: 0,1 + operators\n    case EProgrammingMode.Octal:\n      return new RegExp(`^[0-7${operatorsPattern}]$`); // Octal: 0-7 + operators\n    case EProgrammingMode.Dec:\n      return new RegExp(`^[0-9${operatorsPattern}]$`); // Decimal: 0-9 + operators\n    case EProgrammingMode.Hex:\n      return new RegExp(`^[0-9A-Fa-f${operatorsPattern}]$`); // Hex: 0-9, A-F, a-f + operators\n    default:\n      return new RegExp(`^[${operatorsPattern}]$`); // Only operators\n  }\n}",
      "codeLanguage": "typescript"
    }
  ],
  "features": [
    "User-friendly interface",
    "Supports multiple calculation types",
    "Real-time updates"
  ],
  "futurePlans": [
    "Add graphing capabilities for scientific functions.",
    "Implement a history feature to track previous calculations.",
    "Enhance UI with themes and customization options."
  ],
  "links": [
    {
      "name": "Calculator Documentation",
      "url": "https://example.com/calculator-docs"
    }
  ]
}